/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package advent

import java.io.File

class Packet() {

    fun getLines(file: String): List<String> {
        return File(file).useLines { it.toList() }
    }

    fun parseLines(lines: List<String>) {
        lines.forEach outer@{ x -> run {
            var queueLength = 14
            var message = x.toCharArray()
            var queue = ArrayDeque<Char>(queueLength)
            var position = 0
            message.forEach{
                c -> run {
                    position++
                    if (queue.size >= queueLength)
                        queue.removeFirst()
                    queue.addLast(c)
                    if (queue.size == queueLength && isPacketStart(queue)){
                        println(position)
                        return@outer
                    }
                }
            }
        }}
    }

    fun isPacketStart(queue: ArrayDeque<Char>): Boolean {
        var hs = HashSet<Char>(queue)
        return hs.size == queue.size
    }

    fun getMessageStartList(message: String, blockSize: Int): Int {
        return message.toList().windowed(blockSize).indexOfFirst{ x -> x.toHashSet().size == blockSize }+blockSize
    }

    fun getMessageStartCharArr(message: String, blockSize: Int): Int {
        var a = message.toCharArray()
        for(x in a.indices) {
            if (a.slice(x..x+blockSize-1).toHashSet().size == blockSize) return x+blockSize
        }
        return 0
    }

}

fun main() {
    val file = "/home/sean/src/kotlin/advent/day6/input.txt"
    val blockSize = 14
    var packet = Packet()
    var lines = packet.getLines(file)
    println(packet.getMessageStartList(lines.first(), blockSize))
    println(packet.getMessageStartCharArr(lines.first(), blockSize))
}
