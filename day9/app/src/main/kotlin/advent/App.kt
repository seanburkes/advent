/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package advent

import java.awt.Point
import java.io.File
import kotlin.collections.mutableListOf
import kotlin.math.abs

public fun String.getLinesFromFile(): List<String> {
    return File(this).useLines { it.toList() }
}

public fun List<String>.parseLinesToGrid(): Array<Array<Int>> {
    var grid: Array<Array<Int>> = arrayOf()

    this.forEach { line ->
        run {
            val row = stringToIntArray(line)
            grid = grid + arrayOf(row)
        }
    }

    return grid
}

public fun stringToIntArray(line: String): Array<Int> {
    return line.map { it.toString().toInt() }.toTypedArray()
}

class Rope() {
    var visits = mutableListOf<Point>()

    var knots = createKnots()

    fun createKnots(): MutableList<Point> {
        var knots = mutableListOf<Point>()
        for (i in 0..9) {
            knots.add(Point(0, 0))
        }
        return knots
    }

    fun iterate(lines: List<String>) {
        lines.forEach { line ->
            run {
                val (direction, places) = line.split(" ")
                transition(direction, places.toInt())
            }
        }
    }

    fun transition(direction: String, places: Int) {
        var head = knots[0]
        if (direction == "R") {
            for (x in 1..places) {
                head.x++
                follow()
            }
        } else if (direction == "L") {
            for (x in places downTo 1) {
                head.x--
                follow()
            }
        } else if (direction == "U") {
            for (y in 1..places) {
                head.y++
                follow()
            }
        } else if (direction == "D") {
            for (y in places downTo 1) {
                head.y--
                follow()
            }
        }
    }

    fun follow() {
        for (p in 0..8) {
            follow(knots[p], knots[p + 1])
        }
        visits.add(Point(knots[9]))
    }

    fun follow(head: Point, tail: Point) {
        var diffX = head.x - tail.x
        var diffY = head.y - tail.y
        if ((abs(diffX) > 0 && abs(diffY) > 1) || (abs(diffX) > 1 && abs(diffY) > 0)) {
            if (diffX > 0) tail.x++ else tail.x--
            if (diffY > 0) tail.y++ else tail.y--
        } else if (abs(diffX) > 1) {
            if (diffX > 0) tail.x++ else tail.x--
        } else if (abs(diffY) > 1) {
            if (diffY > 0) tail.y++ else tail.y--
        }
    }
}

fun main() {
    val file = "/home/sean/src/kotlin/advent/day9/input.txt"
    val lines = file.getLinesFromFile()

    var rope = Rope()
    rope.iterate(lines)
    var uniqueVisits = rope.visits.toSet().size
    println("Moves: " + rope.visits.size)
    println("Unique visits: " + uniqueVisits)
}
