/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package advent

import java.io.File
import kotlin.collections.mutableListOf

class Disk() {

    fun getLines(file: String): List<String> {
        return File(file).useLines { it.toList() }
    }

    fun parseLines(lines: List<String>) {
        var currentDirectory = Directory("/", null)
        var dirList = mutableListOf<FileAttributes>()
        var needed = 0
        lines.forEach { x -> run {
            var tokens = x.split(" ")
            if (tokens.first() == "$") {
                if (tokens[1] == "cd") {
                    if (tokens[2] == "..") {
                        //println("going up: " + tokens[2])
                        if (currentDirectory.parent != null) {
                            currentDirectory.files.forEach{ x -> currentDirectory.size += x.size }
                            currentDirectory.directories.forEach { x -> currentDirectory.size += x.size }

                            val dirAttr = FileAttributes(currentDirectory.name, currentDirectory.size)
                            dirList.add(dirAttr)
                            currentDirectory = currentDirectory.parent!!
                        }
                    }
                    else if (tokens[2] != "/") {
                        //println("going down: " + tokens[2])
                        var tmpDir = currentDirectory.directories.filter{it.name == tokens[2]}.first()
                        currentDirectory = tmpDir
                    }
                }
            } else if (tokens.first() == "dir") {
                var d = Directory(tokens[1], currentDirectory)
                currentDirectory.directories.add(d)
            } else {
                val fileAttrs = FileAttributes(tokens[1], tokens[0].toInt())
                currentDirectory.files.add(fileAttrs)
            }
        }}
        while(true) {
            currentDirectory.files.forEach{ x -> currentDirectory.size += x.size }
            currentDirectory.directories.forEach { x -> currentDirectory.size += x.size }

            if (currentDirectory.parent==null) {
                println("Root size: " + currentDirectory.size)
                println("Available space: " + (70000000 - currentDirectory.size))
                needed = 30000000 - (70000000 - currentDirectory.size)
                println("Needed space: " + needed)
                break
            }

            val dirAttr = FileAttributes(currentDirectory.name, currentDirectory.size)
            dirList.add(dirAttr)
            currentDirectory = currentDirectory.parent!!
        }

        var myList = mutableListOf<FileAttributes>()
        dirList.filterTo(myList, { it.size > needed })
        var sorted = myList.sortedBy { it.size }
        println(sorted.first().size)
        /*
        run breaking@{
        sorted.forEach{ x-> run {
            if (x.size>=needed) {
                println(needed)
                println(x) 
                return@breaking
            }
        }}
        }
        */
        //println("Top candidate: " + sorted.first().size)


        var allDirs = 0
        dirList.filter{ x -> x.size <= 100000 }.forEach { x -> allDirs += x.size }
        println("Alldirs: " + allDirs)
    }
}

data class Directory(val name: String, val parent: Directory?) {
    //constructor(name: String, parent: Directory): this(name)
    var directories: MutableList<Directory> = mutableListOf<Directory>()
    //var files: MutableList<Map<String, Int>> = mutableListOf<Map<String, Int>>()
    var files: MutableList<FileAttributes> = mutableListOf<FileAttributes>()
    var size: Int = 0
}

data class FileAttributes(val name: String, val size: Int){}

fun main() {
    val file = "/home/sean/src/kotlin/advent/day7/input.txt"
    var disk = Disk()
    var lines = disk.getLines(file)
    disk.parseLines(lines)
}
