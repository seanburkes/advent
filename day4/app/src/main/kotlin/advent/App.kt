/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package advent

import java.io.File
import kotlin.collections.mutableListOf

class Cleanup() {

    fun getLines(file: String): List<String> {
        return File(file).useLines { it.toList() }
    }

    fun verifyContained(lines: List<String>) {
        var duplicatedEffort = 0
        lines.forEach { line -> run {
            var rooms = line.split(",")
            if (isFullyContained(rooms[0], rooms[1]) || isFullyContained(rooms[1], rooms[0])) {
                duplicatedEffort++
            }
        }}
        println("Elves fully duplicating the effort of others: " + duplicatedEffort)
    }

    fun verifyOverlap(lines: List<String>) {
        var duplicatedEffort = 0
        lines.forEach { line -> run {
            var rooms = line.split(",")
            if (isOverlap(rooms[0], rooms[1]) || isOverlap(rooms[1], rooms[0])) {
                duplicatedEffort++
            }
        }}
        println("Elves overlapping the effort of others: " + duplicatedEffort)
    }

    fun isFullyContained(first: String, second: String): Boolean {
        var left = first.split("-")
        var right = second.split("-")
        var leftRange = getRange(left)
        var rightRange = getRange(right)
        // this is ugly!

        if (isRangeContained(left, rightRange) || isRangeContained(right, leftRange))
            return true
        return false
    }

    fun isOverlap(first: String, second: String): Boolean {
        var left = first.split("-")
        var right = second.split("-")
        var leftRange = getRange(left)
        var rightRange = getRange(right)

        if (isRangeOverlap(left, rightRange) || isRangeOverlap(right, leftRange))
            return true
        return false
    }

    fun isRangeContained(rooms: List<String>, roomRange: IntRange): Boolean {
        return rooms[0].toInt() in roomRange && rooms[1].toInt() in roomRange
    }

    fun getRange(rooms: List<String>): IntRange {
        return rooms[0].toInt()..rooms[1].toInt()
    }

    fun isRangeOverlap(rooms: List<String>, roomRange: IntRange): Boolean {
        return rooms[0].toInt() in roomRange || rooms[1].toInt() in roomRange
    }

}

fun Int.toPriority(): Int {
    if (this >= 97)
        return this-97+1
    return this-65+27
}

fun main() {
    val file = "/home/sean/src/kotlin/advent/day4/test.txt"
    val cleanup = Cleanup()
    val lines = cleanup.getLines(file)
    cleanup.verifyContained(lines)
    cleanup.verifyOverlap(lines)

    // every section has an id
    // every elf has a set of sections (range)
    // elves work in pairs
    // find duplicated efforts that fully contain the other
}
